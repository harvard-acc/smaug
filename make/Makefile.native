# Make rules for native host-side or gem5 execution.

include make/Makefile.common

.PHONY: all tests clean run-tests

SHELL:=/bin/bash

####################################
####      COMPILATION FLAGS     ####
####################################

# To run SMAUG in gem5 simulation, we disable SSSE3, SSSE4.1 and SSSE4.2
# because these are not fully supported by gem5. Also AVX is not enabled.
GEM5_SIMD_CFLAGS = -msse3 -msse2 -mno-ssse3 -mno-sse4.1 -mno-sse4.2
CFLAGS += -DDMA_MODE $(BMARK_SPECIFIC_CFLAGS) $(GEM5_SIMD_CFLAGS)

######################################
####      PRIMARY BUILD SETUP     ####
######################################

# Create object files for each cpp/c file.
BUILD_SRCS_OBJS := $(patsubst %.cpp, %.o, $(BUILD_SRCS))
BUILD_SRCS_OBJS := $(patsubst %.c, %.o, $(BUILD_SRCS_OBJS))
BUILD_SRCS_OBJS := $(patsubst %.S, %.o, $(BUILD_SRCS_OBJS))

BUILD_MAIN_SRC = $(patsubst %, $(BUILD_DIR)/%, $(MAIN))
BUILD_MAIN_OBJ = $(patsubst %.cpp, %.o, $(BUILD_MAIN_SRC))

all:
	$(MAKE) -f make/Makefile.common --no-print-directory src-symlinks
	$(MAKE) -f make/Makefile.common --no-print-directory protos
	$(MAKE) -f make/Makefile.native --no-print-directory exec

exec: $(BUILD_DIR)/bin/$(EXEC)

$(BUILD_DIR)/bin/$(EXEC): $(BUILD_SRCS_OBJS) $(BUILD_MAIN_OBJ)
	$(CXX) $^ $(LFLAGS) -o $@

%.o: %.cpp
	$(CXX) -c $(CXXFLAGS) $(INCLUDES) $^ -o $@

%.o: %.c
	$(CC) -c $(CFLAGS) $(INCLUDES) $^ -o $@

%.o: %.S
	$(CC) -c $(CFLAGS) $(INCLUDES) $^ -o $@

########################################
####      UNIT TEST BUILD SETUP     ####
########################################

CATCH_MAIN = $(BUILD_DIR)/smaug/core/catch
CATCH_OBJ = $(CATCH_MAIN).o
CATCH_SRC = $(CATCH_MAIN).cpp

BUILD_TESTS_COMMON = $(patsubst %, $(BUILD_DIR)/%, $(TESTS_COMMON))
BUILD_TESTS = $(patsubst %, $(BUILD_DIR)/%, $(TESTS))
BUILD_PY_TESTS = $(patsubst %, $(BUILD_DIR)/%, $(PY_TESTS))

TEST_OBJ = $(patsubst %.cpp, %.o, $(BUILD_TESTS))
TEST_BIN = $(patsubst %.cpp, %, $(BUILD_TESTS))
ALL_TESTS = $(abspath $(TEST_BIN) $(BUILD_PY_TESTS))

tests:
	@$(MAKE) -f make/Makefile.common --no-print-directory src-symlinks
	@$(MAKE) -f make/Makefile.common --no-print-directory protos
	@$(MAKE) -f make/Makefile.native --no-print-directory test_bin

test_bin: $(TEST_BIN)

$(TEST_BIN) : % : %.o $(CATCH_OBJ) $(BUILD_SRCS_OBJS) $(BUILD_TESTS_COMMON)
	$(CXX) $(CXXFLAGS) $(INCLUDES) $^ -o $@ $(LFLAGS)

run-tests:
	@$(MAKE) -f make/Makefile.native --no-print-directory tests
	@$(MAKE) -f make/Makefile.native --no-print-directory exec
	@HAS_ERROR=0;				\
	cd $(BUILD_DIR); \
	for t in $(ALL_TESTS); do 		\
		printf "Running test ($$t)";	\
		$$t > tmpout 2>&1;		\
		RET_VAL=$$(echo $$?);		\
		if [ $$RET_VAL -ne 0 ]; then 	\
			echo "... failed";	\
			cat tmpout;		\
			HAS_ERROR=1;		\
		else				\
			echo " ... ok";		\
		fi;				\
	done;					\
	rm -f tmpout;				\
	if [ $$HAS_ERROR -ne 0 ]; then		\
		exit 1;				\
	fi

###########################
####      CLEAN UP     ####
###########################

clean:
	rm -f $(BUILD_DIR)/bin/$(EXEC) $(TEST_BIN) $(BUILD_PROTO_CPP_SRCS) $(BUILD_PROTO_PY_SRCS) $(PROTO_PY_SRCS)
	find $(BUILD_DIR) -name "*.o" | xargs rm -f
